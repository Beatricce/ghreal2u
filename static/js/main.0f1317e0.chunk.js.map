{"version":3,"sources":["images/ghlogo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","Content","Footer","api","Dashboard","showMenu","key","setState","menu","showDetails","record","axios","get","state","user","repo","then","res","details","dataDetails","data","onFinish","values","dataSource","onFinishO","this","i","parseInt","length","push","name","owner","login","url","html_url","dataLabels","labels","map","dli","color","title","tags","columnsDetails","dataIndex","render","href","tag","console","log","columns","text","onClick","style","padding","minHeight","src","logo","alt","width","float","margin","theme","mode","defaultSelectedKeys","Item","e","label","paddingTop","type","htmlType","textAlign","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f1317e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ghlogo.0ba2aa20.png\";","import React, {Component} from 'react';\nimport {Button, Form, Input, Layout, Menu, Table, Tag} from 'antd';\nimport logo from './images/ghlogo.png';\nimport './App.css';\nimport axios from 'axios';\nconst { Header, Content, Footer } = Layout;\n\nconst api = {\n  baseUrl : \"https://api.github.com\",\n  client_id : \"3e550c2ad7e4c5a2\",\n  client_secret : \"7c7a9ecaf707856bfb4e4419680070b85099f4c5\"\n}\n\nclass Dashboard extends Component{\n  constructor(){\n    super();\n    this.state = {\n      dataSource: [],\n      dataDetails: [],\n      menu: '1',\n      user: \"\",\n      repo: '',\n      details: false,\n    }\n  }\n\n  showMenu = key =>{\n    this.setState({\n      menu : key\n    });\n  }\n\n  showDetails = record =>{\n    axios.get(api.baseUrl\n        + \"/repos/\"+ this.state.user\n        + \"/\" +record.repo + \"/issues\"\n      )\n      .then((res) => {\n        this.setState({\n          details : true,\n          dataDetails: res.data,\n          repo: record.repo\n        })\n      })\n\n  }\n\n  onFinish = values => {\n    axios.get(api.baseUrl\n        + \"/users/\" + values.user + \"/repos\"\n      )\n      .then((res) => {\n        this.setState({\n          dataSource : res.data,\n          user: values.user,\n        })\n      })\n\n\n  };\n\n  onFinishO = values => {\n    axios.get(api.baseUrl\n        + \"/orgs/\" + values.user + \"/repos\"\n      )\n      .then((res) => {\n        this.setState({\n          dataSource : res.data,\n          user: values.user,\n        })\n      })\n  };\n\n  render(){\n    var dataSource = [];\n    var data = this.state.dataSource;\n    for (var i = 0; i < parseInt(data.length, 10); i++) {\n        dataSource.push({\n            repo: data[i].name,\n            owner: {\n              name: data[i].owner.login,\n              url: data[i].owner.html_url\n            },\n            details: 'See More'\n        });\n    }\n\n    var details = this.state.dataDetails;\n    var dataDetails = [];\n    for (var i = 0; i < parseInt(details.length, 10); i++) {\n        var dataLabels = [];\n        var dl = details[i].labels;\n        dl.map(dli=> (\n          dataLabels.push({\n              name: dli.name,\n              color: \"#\" + dli.color,\n          })\n        ));\n        dataDetails.push({\n            title: details[i].title,\n            state: details[i].state,\n            user: {\n              name: details[i].user.login,\n              url: details[i].user.html_url\n            },\n            tags: dataLabels\n\n        });\n    }\n\n      const columnsDetails = [\n        {\n          title: 'Issue title',\n          dataIndex: 'title',\n          key: 'title',\n        },\n        {\n          title: 'State',\n          dataIndex: 'state',\n          key: 'state',\n        },\n        {\n          title: 'Author',\n          dataIndex: 'user',\n          key: 'user',\n          render: user => <a href={user.url}>{user.name}</a>,\n        },\n        {\n          title: 'Tags/Labels',\n          dataIndex: 'tags',\n          key: 'tags',\n          render: tags =>\n        <>\n          {tags.map(tag => (\n            console.log(tag),\n            <Tag color={tag.color} key={tag}>\n              {tag.name}\n            </Tag>\n          ))}\n        </>\n        }\n      ];\n      const columns = [\n        {\n          title: 'Repository',\n          dataIndex: 'repo',\n          key: 'repo',\n        },\n        {\n          title: 'Owner',\n          dataIndex: 'owner',\n          key: 'owner',\n          render: owner => <a href={owner.url}>{owner.name}</a>,\n        },\n        {\n          title: 'Details',\n          dataIndex: 'details',\n          key: 'details',\n          render: (text, record) => <a onClick={()=> this.showDetails(record)}>{text}</a>,\n        },\n      ];\n    return (\n       <Layout >\n       <Header style={{ padding: '0 50px', minHeight: '120px' }}>\n\n       <img src={logo} alt=\"Logo\" style={{ width: '100px', float: 'left', margin: '16px 24px 16px 0' }}/>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} style={{ margin: '16px 24px 16px 0'  }}>\n\n            <Menu.Item key=\"1\" onClick={(e) => this.showMenu(e.key)} >Users</Menu.Item>\n            <Menu.Item key=\"2\" onClick={(e) => this.showMenu(e.key)} >Organizations</Menu.Item>\n          </Menu>\n        </Header>\n          <Content style={{ padding: '0 50px', minHeight: '440px' }}>\n          {this.state.details!==true?(\n            this.state.menu === '1'?(\n              <>\n              <Form\n                onFinish={this.onFinish}>\n                  <Form.Item\n                    name=\"user\"\n                    label=\"Username\"\n                    style={{ paddingTop: 10 }}>\n                    <Input />\n                  </Form.Item>\n                  <Form.Item  style={{ paddingTop: 5 }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Confirmar\n                    </Button>\n                  </Form.Item>\n              </Form>\n              <Table dataSource={dataSource} columns={columns} />\n            </>\n            ):(\n              <>\n              <Form\n                  onFinish={this.onFinishO}>\n                    <Form.Item\n                      name=\"user\"\n                      label=\"Organization name\"\n                      style={{ paddingTop: 10 }}>\n                      <Input />\n                    </Form.Item>\n                    <Form.Item  style={{ paddingTop: 5 }}>\n                      <Button type=\"primary\" htmlType=\"submit\">\n                        Confirmar\n                      </Button>\n                    </Form.Item>\n                </Form>\n                <Table dataSource={dataSource} columns={columns} />\n                </>\n            )\n          ):(<Table dataSource={dataDetails} columns={columnsDetails} />)}\n          </Content>\n        <Footer style={{ textAlign: 'center' }}>Beatricce ©2020</Footer>\n\n        </Layout>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}